#!/bin/bash
[ -f /.dockerenv ] || { echo "please run in supplied container"; exit 1; }
eval "$(environment)"
set -o nounset -o pipefail -o errexit

cores=$(nproc)
device="${DEVICE?}"
device_manifest_repo="${MANIFEST_REPO?}/${device}"
external_dir="${EXTERNAL_DIR?}"
build_kernel="${BUILD_KERNEL?}"
kernel_dir="${external_dir}/kernel/${device}"
base_dir="${BASE_DIR?}"

# Still needed? Lets try by disabling.
# sudo chown -R "$(id -u)":"$(id -g)" "$HOME/build"

mkdir --parents "${base_dir}" "${device_manifest_repo}"

export GIT_WORK_TREE="$device_manifest_repo"
export GIT_DIR="${device_manifest_repo}/.git"
[ -d "${device_manifest_repo}/.git" ] || git init
git add .
git commit --all --message "automated cache commit" || :
unset GIT_DIR GIT_WORK_TREE

echo "Cloning platform..."
cd "${base_dir}"
rm .repo/manifests/ .repo/manifests.git/ -rf
repo init \
	--depth=1 \
	--manifest-url "${device_manifest_repo}" \
	--manifest-name base.xml

# --fetch-submodules is normally not needed so do not enable because some repos
# contain submodules that we donâ€™t need.
# Sometimes repo sync hangs until the user presses return. Seems to be Docker specific. Lets see if `yes` fixes it. -> Did not help.
repo sync \
	--jobs "${cores}" \
	--force-sync \
	--no-manifest-update \
	--verbose \
	--current-branch \
	--optimized-fetch

repo --no-pager forall --abort-on-errors -p --verbose --jobs "${cores}" -c 'git reset --hard ; git clean --force -dx'

repo --no-pager forall --abort-on-errors -p --verbose --jobs "${cores}" -c 'fetch-tag'
verify

## TODO: Not needed for GrapheneOS.
# Kernel
if [ "${build_kernel}" == "true" ]; then
	echo "Cloning kernel..."
	mkdir -p "${kernel_dir}"
	cd "${kernel_dir}"
	rm .repo/manifests/ .repo/manifests.git/ -rf
	repo init \
		--no-clone-bundle \
		--manifest-url "${device_manifest_repo}" \
		--manifest-name "kernel.xml"
	repo sync \
		--verbose \
		--current-branch \
		--force-sync \
		--no-tags \
		--optimized-fetch \
		--jobs "${cores}" \
		--retry-fetches 3
	repo --no-pager forall --abort-on-errors -p --verbose --jobs "${cores}" -c 'git reset --hard ; git clean --force -dx'
fi
