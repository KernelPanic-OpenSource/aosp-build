#!/bin/bash
[ -f /.dockerenv ] || { echo "please run in supplied container"; exit 1; }
set -e; eval "$(environment)"

readonly key_dir="${KEY_DIR?}"
readonly os_name="${OS_NAME?}"
readonly rand_file="${RANDFILE?}"

# TODO: Review the list of keys. Probably not all of them are needed anymore with Android 11.
declare -a keys=(
	avb
	releasekey
	platform
	shared
	media
	networkstack
	verity
	kernel
	com.android.conscrypt
	com.android.media
	com.android.media.swcodec
	com.android.resolv
	com.android.runtime
	com.android.tzdata
)

mkdir -p "${key_dir}"

if [ -f "${rand_file}" ]; then
	echo "Keeping seed: ${rand_file}"
else
	echo "Generating seed: ${rand_file}"
	head -c 1G < /dev/urandom > "${rand_file}";
fi
ln -sf "${rand_file}" "${HOME}/.rnd";

echo "Generating signing keychain:"
for key in "${keys[@]}"; do
	x509_file="${key_dir}/${key}.x509.pem"
	pk8_file="${key_dir}/${key}.pk8"
	[ -f "${pk8_file}" ] && continue;
	echo "-> ${x509_file}"
	echo "-> ${pk8_file}"
	cat <<-EOF | bash && exit 1
		cd "${key_dir}"
		printf "" | make_key "$key" "/CN=${os_name}" >/dev/null 2>&1
	EOF
	[ -f "${pk8_file}" ] || { echo "Generation failed for ${key}"; exit 1 ;};
	case $key in
		verity)
			der_file="${key_dir}/${key}_user.der.x509"
			verity_file="${key_dir}/${key}_key"
			echo "-> ${der_file}"
			openssl x509 -outform der -in "${x509_file}" -out "${der_file}"
			[ -f "${der_file}" ] || \
				{ echo "Generation failed for ${key}"; exit 1 ;};
			echo "-> ${verity_file}.pub"
			generate_verity_key -convert "${x509_file}" "${verity_file}"
			[ -f "${verity_file}.pub" ] || \
				{ echo "Generation failed for ${key}"; exit 1 ;};
		;;
		avb)
			avb_file="${key_dir}/avb_pkmd.bin"
			pem_file="${key_dir}/avb.pem"
			echo "-> ${pem_file}"
			openssl pkcs8 \
				-inform DER \
				-nocrypt \
				-in "${pk8_file}" \
				-out "${pem_file}"
			[ -f "${pem_file}" ] || \
				{ echo "Generation failed for ${key}"; exit 1 ;};
			echo "-> ${avb_file}"
			avbtool extract_public_key \
				--key "${pem_file}" \
				--output "${avb_file}"
			[ -f "${avb_file}" ] || \
				{ echo "Generation failed for ${key}"; exit 1 ;};
		;;
		com.android.*)
			payload_file="${key_dir}/${key}.pem"
			avbpubkey_file="${key_dir}/${key}.avbpubkey"
			echo "-> ${payload_file}"
			openssl genrsa -out "${payload_file}" 4096 >/dev/null 2>&1
			[ -f "${payload_file}" ] \
				|| { echo "Generation failed for ${payload_file}"; exit 1 ;};
			echo "-> ${avbpubkey_file}"
			avbtool extract_public_key \
				--key "${payload_file}" \
				--output "${avbpubkey_file}"
		;;
	esac
done
