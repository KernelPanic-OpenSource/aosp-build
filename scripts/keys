#!/bin/bash
[ -f /.dockerenv ] || { echo "please run in supplied container"; exit 1; }
set -e; eval "$(environment)"

key_dir="${KEY_DIR?}"
cert_subject="/CN=${OS_NAME?}"

[ ! -d "$key_dir" ] || {
	echo "Key directory already exists. Refusing to overwrite"; exit 1;
}
mkdir -p "${key_dir}"
cd "${key_dir}" || exit

for key in {releasekey,platform,shared,media,verity} ; do
	echo "Generating Key: \"$key\""
	! make_key "$key" "$cert_subject"
done

echo "Generating Key: \"avb\""
openssl genrsa -out avb.pem 2048

echo "Generating Key: \"avb_pkmd\""
avbtool extract_public_key --key avb.pem --output avb_pkmd.bin

echo "Generating Key: \"verity_user\""
openssl x509 -outform der -in verity.x509.pem -out verity_user.der.x509

echo "Generating Key: \"verity_key\""
generate_verity_key -convert verity.x509.pem verity_key

echo "Generating Key: \"kernel_key\""
openssl req \
	-newkey "rsa:4096" \
	-nodes \
	-utf8 \
	-sha256 \
	-subj "$cert_subject" \
	-days 36500 \
	-batch \
	-x509 \
	-outform PEM \
	-out signing_key.pem \
	-keyout signing_key.pem \
	-addext "basicConstraints=critical,CA:FALSE" \
	-addext	"keyUsage=digitalSignature" \
	-addext	"subjectKeyIdentifier=hash" \
	-addext	"authorityKeyIdentifier=keyid"
