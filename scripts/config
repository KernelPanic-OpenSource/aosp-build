#!/usr/bin/python3

import yaml
import re
import os.path
from os import environ, getenv, getcwd
from html.parser import HTMLParser
from urllib.request import urlopen
from collections import OrderedDict, Counter
from yaml.resolver import BaseResolver

class AndroidImagesParser(HTMLParser):

    def __init__(self, config):
        HTMLParser.__init__(self)
        self.config = config
        self.devices = self.config['devices'].keys()
        self.version = self.config['version']
        self.version_open = False
        self.hash_pattern = re.compile(r'\b[0-9a-f]{64}\b')
        self.images = {}
        self.image = {}
        self.build = False
        self.variant = False
        self.device = False

    def handle_starttag(self, tag, attrs):
        if tag == 'tr':
            for attr in attrs:
                if attr[0] == 'id':
                    for device in self.devices:
                        if attr[1].startswith(device):
                            self.image = {}
                            self.device = device

    def handle_data(self, data):
        if self.device:
            if len(data) > 6:
                if self.hash_pattern.match(data) \
                and self.version_open == True:
                    self.image['factory_hash'] = data
                elif data.split(' ')[0].startswith("%s." % self.version):
                    self.version_open = True
                    tokens = data.split(" ")
                    self.image['factory_build'] = \
                        tokens[1].replace("(","").replace(",", "")
                    variant = tokens[4:5]
                    if variant:
                        self.variant = variant[0].replace(")","").lower()
                    else:
                        self.variant = "global"

    def handle_endtag(self, tag):
        if tag == 'tr' and self.device and self.variant:
            if self.version_open == True:
                self.images.setdefault(
                    self.device,{}
                )[self.variant] = self.image
                self.version_open = False
            self.device = False
            self.build = False
            self.variant = False

def dict_representer(dumper, data):
    return dumper.represent_dict(data.items())
def dict_constructor(loader, node):
    return OrderedDict(loader.construct_pairs(node))
yaml.add_representer(OrderedDict, dict_representer)
yaml.add_constructor(BaseResolver.DEFAULT_MAPPING_TAG, dict_constructor)

if __name__ == "__main__":

    config_file='%s/config.yml' % getcwd()
    with open(config_file, encoding='utf-8') as data_file:
        config = yaml.load(data_file.read())

    url = "https://developers.google.com/android/images"
    html = urlopen(url).read()
    parser = AndroidImagesParser(config)
    parser.images = {}
    parser.feed(str(html))

    for device in config['devices']:
        for variant, values in parser.images[device].items():
            for key, value in values.items():
                config['devices'].setdefault(
                    device,{}
                )[key] = value

    with open(config_file, 'w') as outfile:
        yaml.dump(config, outfile, default_flow_style=False)
